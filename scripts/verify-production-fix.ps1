# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ lifeundo.ru
# –ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ Vercel

Write-Host "üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ lifeundo.ru" -ForegroundColor Green
Write-Host ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
function Test-Url {
    param(
        [string]$Url,
        [string]$ExpectedStatus,
        [string]$Description
    )
    
    Write-Host "–ü—Ä–æ–≤–µ—Ä—è—é: $Description" -ForegroundColor Yellow
    Write-Host "URL: $Url" -ForegroundColor Gray
    
    try {
        $response = Invoke-WebRequest -Uri $Url -Method Head -UseBasicParsing -TimeoutSec 10
        $status = $response.StatusCode
        $headers = $response.Headers
        
        if ($status -eq $ExpectedStatus) {
            Write-Host "‚úÖ $Description - OK ($status)" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå $Description - –û–®–ò–ë–ö–ê ($status, –æ–∂–∏–¥–∞–ª—Å—è $ExpectedStatus)" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå $Description - –û–®–ò–ë–ö–ê: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
    Write-Host ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
function Test-Redirect {
    param(
        [string]$Url,
        [string]$ExpectedLocation,
        [string]$Description
    )
    
    Write-Host "–ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–¥–∏—Ä–µ–∫—Ç: $Description" -ForegroundColor Yellow
    Write-Host "URL: $Url" -ForegroundColor Gray
    
    try {
        $response = Invoke-WebRequest -Uri $Url -Method Head -UseBasicParsing -TimeoutSec 10 -MaximumRedirection 0
        Write-Host "‚ùå –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (—Å—Ç–∞—Ç—É—Å: $($response.StatusCode))" -ForegroundColor Red
        return $false
    }
    catch {
        if ($_.Exception.Response) {
            $status = $_.Exception.Response.StatusCode.value__
            $location = $_.Exception.Response.Headers.Location
            
            if ($status -eq 308 -or $status -eq 301 -or $status -eq 302) {
                if ($location -like "*$ExpectedLocation*") {
                    Write-Host "‚úÖ $Description - OK ($status -> $location)" -ForegroundColor Green
                    return $true
                } else {
                    Write-Host "‚ùå $Description - –û–®–ò–ë–ö–ê (—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ $location, –æ–∂–∏–¥–∞–ª—Å—è $ExpectedLocation)" -ForegroundColor Red
                    return $false
                }
            } else {
                Write-Host "‚ùå $Description - –û–®–ò–ë–ö–ê (—Å—Ç–∞—Ç—É—Å: $status)" -ForegroundColor Red
                return $false
            }
        } else {
            Write-Host "‚ùå $Description - –û–®–ò–ë–ö–ê: $($_.Exception.Message)" -ForegroundColor Red
            return $false
        }
    }
    Write-Host ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function Test-Headers {
    param(
        [string]$Url,
        [hashtable]$ExpectedHeaders,
        [string]$Description
    )
    
    Write-Host "–ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≥–æ–ª–æ–≤–∫–∏: $Description" -ForegroundColor Yellow
    Write-Host "URL: $Url" -ForegroundColor Gray
    
    try {
        $response = Invoke-WebRequest -Uri $Url -Method Head -UseBasicParsing -TimeoutSec 10
        $headers = $response.Headers
        $allGood = $true
        
        foreach ($headerName in $ExpectedHeaders.Keys) {
            $expectedValue = $ExpectedHeaders[$headerName]
            $actualValue = $headers[$headerName]
            
            if ($actualValue -like "*$expectedValue*") {
                Write-Host "‚úÖ $headerName: $actualValue" -ForegroundColor Green
            } else {
                Write-Host "‚ùå $headerName: $actualValue (–æ–∂–∏–¥–∞–ª—Å—è: $expectedValue)" -ForegroundColor Red
                $allGood = $false
            }
        }
        
        if ($allGood) {
            Write-Host "‚úÖ $Description - –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ OK" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå $Description - –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå $Description - –û–®–ò–ë–ö–ê: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
    Write-Host ""
}

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
Write-Host "=== –û–°–ù–û–í–ù–´–ï –ü–†–û–í–ï–†–ö–ò ===" -ForegroundColor Cyan

$results = @()

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –∫–æ—Ä–Ω—è
$results += Test-Redirect -Url "https://lifeundo.ru/" -ExpectedLocation "/ru" -Description "–†–µ–¥–∏—Ä–µ–∫—Ç –∫–æ—Ä–Ω—è –Ω–∞ /ru"

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
$results += Test-Url -Url "https://lifeundo.ru/ru" -ExpectedStatus 200 -Description "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ /ru"

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∞—Ä–∏—Ñ–æ–≤
$results += Test-Url -Url "https://lifeundo.ru/ru/pricing" -ExpectedStatus 200 -Description "–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ /ru/pricing"

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
$results += Test-Url -Url "https://lifeundo.ru/ru/support" -ExpectedStatus 200 -Description "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ /ru/support"

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ /ok —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
$okHeaders = @{
    "Cache-Control" = "no-store, no-cache, must-revalidate"
    "Pragma" = "no-cache"
}
$results += Test-Headers -Url "https://lifeundo.ru/ok" -ExpectedHeaders $okHeaders -Description "–°—Ç—Ä–∞–Ω–∏—Ü–∞ /ok —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API healthz
$results += Test-Url -Url "https://lifeundo.ru/api/healthz" -ExpectedStatus 200 -Description "API healthz"

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
$results += Test-Url -Url "https://lifeundo.ru/ping" -ExpectedStatus 200 -Description "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ /ping"

Write-Host "=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò ===" -ForegroundColor Cyan

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
$additionalPages = @(
    @{Url="https://lifeundo.ru/ru/use-cases"; Description="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–µ–π—Å–æ–≤"},
    @{Url="https://lifeundo.ru/ru/fund/apply"; Description="–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ–Ω–¥–∞"},
    @{Url="https://lifeundo.ru/ru/privacy"; Description="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"},
    @{Url="https://lifeundo.ru/ru/terms"; Description="–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ª–æ–≤–∏–π"},
    @{Url="https://lifeundo.ru/ru/faq"; Description="–°—Ç—Ä–∞–Ω–∏—Ü–∞ FAQ"}
)

foreach ($page in $additionalPages) {
    $results += Test-Url -Url $page.Url -ExpectedStatus 200 -Description $page.Description
}

# –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
Write-Host "=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===" -ForegroundColor Cyan
$successCount = ($results | Where-Object { $_ -eq $true }).Count
$totalCount = $results.Count

Write-Host "–£—Å–ø–µ—à–Ω–æ: $successCount –∏–∑ $totalCount –ø—Ä–æ–≤–µ—Ä–æ–∫" -ForegroundColor $(if ($successCount -eq $totalCount) { "Green" } else { "Yellow" })

if ($successCount -eq $totalCount) {
    Write-Host ""
    Write-Host "üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ." -ForegroundColor Green
    Write-Host ""
    Write-Host "–ü—Ä—É—Ñ—ã –¥–ª—è —Ä–µ–ª–∏–∑–∞:" -ForegroundColor Cyan
    Write-Host "‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç / ‚Üí /ru —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
    Write-Host "‚úÖ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã /ru/* –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 200 OK" -ForegroundColor Green
    Write-Host "‚úÖ /ok –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Cache-Control –∑–∞–≥–æ–ª–æ–≤–∫–∏" -ForegroundColor Green
    Write-Host "‚úÖ API –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–æ—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç" -ForegroundColor Green
} else {
    Write-Host ""
    Write-Host "‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Vercel." -ForegroundColor Red
    Write-Host ""
    Write-Host "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:" -ForegroundColor Yellow
    Write-Host "‚Ä¢ –î–æ–º–µ–Ω –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É" -ForegroundColor Yellow
    Write-Host "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–ª–æ–π –Ω–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–æ–¥-–∞–ª–∏–∞—Å" -ForegroundColor Yellow
    Write-Host "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å DNS –∏–ª–∏ SSL" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Ä–µ–º—è: $(Get-Date)" -ForegroundColor Gray