#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ FreeKassa API
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 
 *   node test-webhook.js create <api-url> - —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
 *   node test-webhook.js notify <webhook-url> - —Ç–µ—Å—Ç webhook
 */

const https = require('https');
const crypto = require('crypto');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook
const testWebhookData = {
  merchant_id: 'TEST_MERCHANT',
  order_id: 'LU-TEST-' + Date.now(),
  amount: '1490',
  currency: 'RUB',
  us_email: 'test@example.com',
  us_plan: 'pro_year',
  us_locale: 'ru',
  sign: '' // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
const testCreateData = {
  email: 'test@example.com',
  plan: 'pro_year',
  locale: 'ru'
};

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (–¥–ª—è —Ç–µ—Å—Ç–∞)
const secretKey = 'TEST_SECRET_KEY';

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è webhook
function generateSignature(data, secret) {
  const base = `${data.merchant_id}:${data.amount}:${data.currency}:${data.order_id}:${secret}`;
  return crypto.createHash('sha256').update(base).digest('hex');
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å
testWebhookData.sign = generateSignature(testWebhookData, secretKey);

function makeRequest(url, data, method = 'POST') {
  const postData = JSON.stringify(data);
  
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(postData)
    }
  };

  return new Promise((resolve, reject) => {
    const req = https.request(url, options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          data: responseData,
          headers: res.headers
        });
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.write(postData);
    req.end();
  });
}

async function testCreatePayment(url) {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞:', url);
  console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', JSON.stringify(testCreateData, null, 2));
  console.log('---');

  try {
    const response = await makeRequest(url, testCreateData);
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.statusCode}`);
    console.log(`üìù –û—Ç–≤–µ—Ç: ${response.data}`);
    
    if (response.statusCode === 200) {
      const data = JSON.parse(response.data);
      if (data.url && data.order_id) {
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        console.log(`üîó URL: ${data.url}`);
        console.log(`üÜî Order ID: ${data.order_id}`);
      } else {
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
      }
    } else {
      console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }
}

async function testWebhook(url) {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook –Ω–∞:', url);
  console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', JSON.stringify(testWebhookData, null, 2));
  console.log('üîê –ü–æ–¥–ø–∏—Å—å:', testWebhookData.sign);
  console.log('---');

  try {
    const response = await makeRequest(url, testWebhookData);
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.statusCode}`);
    console.log(`üìù –û—Ç–≤–µ—Ç: ${response.data}`);
    
    if (response.statusCode === 200) {
      console.log('‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      console.log('‚ùå Webhook –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
const command = process.argv[2];
const url = process.argv[3];

if (!command || !url) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  node test-webhook.js create <api-url>     - —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
  console.log('  node test-webhook.js notify <webhook-url> - —Ç–µ—Å—Ç webhook');
  console.log('');
  console.log('–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  node test-webhook.js create https://your-project.vercel.app/api/fk/create');
  console.log('  node test-webhook.js notify https://your-project.vercel.app/api/fk/notify');
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (command === 'create') {
  testCreatePayment(url);
} else if (command === 'notify') {
  testWebhook(url);
} else {
  console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:', command);
  console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: create –∏–ª–∏ notify');
  process.exit(1);
}
