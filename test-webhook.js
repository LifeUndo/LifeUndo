#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ FreeKassa webhook
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-webhook.js <webhook-url>
 */

const https = require('https');
const crypto = require('crypto');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  merchant_id: 'TEST_MERCHANT',
  order_id: 'LU-TEST-' + Date.now(),
  amount: '1490',
  currency: 'RUB',
  us_email: 'test@example.com',
  us_plan: 'pro_year',
  us_locale: 'ru',
  sign: '' // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ
};

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (–¥–ª—è —Ç–µ—Å—Ç–∞)
const secretKey = 'TEST_SECRET_KEY';

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
function generateSignature(data, secret) {
  const base = `${data.merchant_id}:${data.amount}:${data.currency}:${data.order_id}:${secret}`;
  return crypto.createHash('sha256').update(base).digest('hex');
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å
testData.sign = generateSignature(testData, secretKey);

function testWebhook(url) {
  const postData = JSON.stringify(testData);
  
  const options = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(postData)
    }
  };

  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π webhook –Ω–∞:', url);
  console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', JSON.stringify(testData, null, 2));
  console.log('üîê –ü–æ–¥–ø–∏—Å—å:', testData.sign);
  console.log('---');

  const req = https.request(url, options, (res) => {
    let data = '';
    
    res.on('data', (chunk) => {
      data += chunk;
    });
    
    res.on('end', () => {
      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
      console.log(`üìù –û—Ç–≤–µ—Ç: ${data}`);
      
      if (res.statusCode === 200) {
        console.log('‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      } else {
        console.log('‚ùå Webhook –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
      }
    });
  });

  req.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  });

  req.write(postData);
  req.end();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
const webhookUrl = process.argv[2];
if (!webhookUrl) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-webhook.js <webhook-url>');
  console.log('–ü—Ä–∏–º–µ—Ä: node test-webhook.js https://your-project.vercel.app/api/fk/notify');
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testWebhook(webhookUrl);
