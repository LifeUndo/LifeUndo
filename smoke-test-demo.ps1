# Demo Smoke Test Script
# Tests the demo version functionality

param(
    [Parameter(Mandatory=$true)]
    [string]$DemoUrl
)

Write-Host "üß™ LifeUndo Demo Smoke Test" -ForegroundColor Cyan
Write-Host "üîó Testing: $DemoUrl" -ForegroundColor Yellow
Write-Host ""

# Test 1: Main demo page
Write-Host "1Ô∏è‚É£ Testing main demo page..." -ForegroundColor Green
try {
    $response = Invoke-WebRequest -Uri "$DemoUrl/demo" -Method GET
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Main demo page loads successfully" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Main demo page failed: $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Main demo page error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 2: Features page
Write-Host "2Ô∏è‚É£ Testing features page..." -ForegroundColor Green
try {
    $response = Invoke-WebRequest -Uri "$DemoUrl/demo/features" -Method GET
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Features page loads successfully" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Features page failed: $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Features page error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 3: Pricing page
Write-Host "3Ô∏è‚É£ Testing pricing page..." -ForegroundColor Green
try {
    $response = Invoke-WebRequest -Uri "$DemoUrl/demo/pricing" -Method GET
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Pricing page loads successfully" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Pricing page failed: $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Pricing page error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 4: FAQ page
Write-Host "4Ô∏è‚É£ Testing FAQ page..." -ForegroundColor Green
try {
    $response = Invoke-WebRequest -Uri "$DemoUrl/demo/faq" -Method GET
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ FAQ page loads successfully" -ForegroundColor Green
    } else {
        Write-Host "‚ùå FAQ page failed: $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå FAQ page error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 5: Contacts page
Write-Host "5Ô∏è‚É£ Testing contacts page..." -ForegroundColor Green
try {
    $response = Invoke-WebRequest -Uri "$DemoUrl/demo/contacts" -Method GET
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Contacts page loads successfully" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Contacts page failed: $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Contacts page error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 6: Demo FreeKassa API
Write-Host "6Ô∏è‚É£ Testing demo FreeKassa API..." -ForegroundColor Green
try {
    $body = @{
        email = "test@example.com"
        plan = "vip_lifetime"
        locale = "ru"
        honeypot = ""
    } | ConvertTo-Json

    $response = Invoke-RestMethod -Uri "$DemoUrl/api/fk/demo-create" -Method POST -ContentType "application/json" -Body $body
    
    if ($response.url -and $response.order_id) {
        Write-Host "‚úÖ Demo FreeKassa API works" -ForegroundColor Green
        Write-Host "   Order ID: $($response.order_id)" -ForegroundColor Gray
        Write-Host "   Demo mode: $($response.demo_mode)" -ForegroundColor Gray
    } else {
        Write-Host "‚ùå Demo FreeKassa API failed: $($response | ConvertTo-Json)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Demo FreeKassa API error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 7: Demo notify endpoint
Write-Host "7Ô∏è‚É£ Testing demo notify endpoint..." -ForegroundColor Green
try {
    $response = Invoke-WebRequest -Uri "$DemoUrl/api/fk/demo-notify" -Method GET
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Demo notify endpoint accessible" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Demo notify endpoint failed: $($response.StatusCode)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Demo notify endpoint error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 8: Check for demo indicators
Write-Host "8Ô∏è‚É£ Checking demo indicators..." -ForegroundColor Green
try {
    $response = Invoke-WebRequest -Uri "$DemoUrl/demo" -Method GET
    $content = $response.Content
    
    if ($content -match "DEMO") {
        Write-Host "‚úÖ Demo badge found" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Demo badge not found" -ForegroundColor Red
    }
    
    if ($content -match "getlifeundo.com") {
        Write-Host "‚úÖ Link to production site found" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Link to production site not found" -ForegroundColor Red
    }
    
    if ($content -match "–î–µ–º–æ-—Ä–µ–∂–∏–º") {
        Write-Host "‚úÖ Demo mode notice found" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Demo mode notice not found" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Demo indicators check error: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "üéâ Demo smoke test completed!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Summary:" -ForegroundColor Yellow
Write-Host "‚Ä¢ Demo pages should load with 200 status" -ForegroundColor White
Write-Host "‚Ä¢ Demo FreeKassa API should create test payments" -ForegroundColor White
Write-Host "‚Ä¢ Demo indicators should be visible" -ForegroundColor White
Write-Host "‚Ä¢ Links to production site should be present" -ForegroundColor White
