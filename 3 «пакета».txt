да, хороший пойнт — полотно разрослось. Разделим на 3 «пакета» (PR/ветки) с минимальными зависимостями. Так Cursor применит их по очереди, и у нас не будет переполнения.

# Пакет A — Core + Multi-tenant (уже в проде 0.4.0)

**Цель:** базовый сайт + .ru под ключ + white-label каркас без SDK/мониторинга.
**Коммит/ветка:** `feat/core-multitenant-0.4.0`
**Содержимое (из Canvas уже есть):**

* `src/lib/tenant.ts`, правки `layout.tsx`, `page.tsx`, `/partners`, `/developers`
* `src/app/api/admin/tenants/*` (CRUD), сиды `seed.tenants.sql`
* Миграции: `tenants`, `tenant_domains`, `tenant_id` в ключевых таблицах
* Безопасность: обновлённый `middleware.ts`, `lib/security.ts`, усиленный FK webhook
  **Проверки:**
* [https://getlifeundo.com](https://getlifeundo.com) и [https://lifeundo.ru](https://lifeundo.ru) показывают одинаковый бренд LifeUndo
* `/partners`, `/developers`, `/openapi.yaml` ок
* `/admin` под BasicAuth доступен, `POST /api/admin/tenants` создаёт арендатора

# Пакет B — SDK (JS+Python) — изолировано

**Цель:** клиенты API, не трогают рантайм сайта.
**Коммит/ветка:** `feat/sdk-pack-0.4.1`
**Файлы:**

* `packages/lifeundo-js/{package.json,tsconfig.json,src/index.ts,README.md}`
* `packages/lifeundo-python/{pyproject.toml,lifeundo/{__init__.py,client.py},README.md}`
  **Проверки:**
* JS: `cd packages/lifeundo-js && npm run build` → `dist/` появился
* Py: `cd packages/lifeundo-python && python -m build` → `dist/` появился
* Локальный смоук (с RAW ключом): `validate / activate / usage` отвечают

# Пакет C — Ops Pack (Cloudflare + Monitoring + Usage)

**Коммит/ветка:** `feat/ops-pack-0.4.1`
**Файлы:**

* Cloudflare: `cloudflare/waf-rules.json`, `cloudflare/README-Cloudflare.md`
* Monitoring: `monitoring/README-Monitoring.md`, `sentry.*.config.ts`, правка `next.config.mjs`, дополнение `.env.example` (SENTRY\_\*), эндпоинт `/api/_health/db`
* Usage счётчик: `src/lib/usage.ts`, правки `api/v1/*` для инкремента, миграция `api_usage`
* Пер-тенантные доп.таблицы (по желанию): `tenant_plans`, `status_banners`, `email_templates` и чтение баннера в `/status`
  **Проверки:**
* Cloudflare: правило на `/admin|/drizzle` (Block/Challenge) + RateLimit `/api/*` 120 rps/ban 5m
* Sentry: DSN в env, события появляются, `/api/_health/db` = `{ ok:true, db:'up' }`
* `/api/v1/usage` — растёт `monthCalls` после вызовов

---

## Как прогнать по очереди (рекомендуемый порядок)

1. **A/Core** → миграции/сиды → smoke `/status`, `.ru` зеркало.
2. **B/SDK** → build обоих пакетов (публикацию оставить на потом).
3. **C/Ops** → Cloudflare правила → Sentry DSN в Beget → ребилд → UptimeRobot.

Если хочешь, я вынесу **B/SDK** и **C/Ops** в два отдельных мини-Canvas, чтобы упростить дальнейшие правки и не трогать «ядро». Скажи «разнеси по двум канвасам» — и я создам их с аккуратными, короткими файлами (по одному на канвас), чтобы Cursor применял пачками без риска переполнить документ.
