// GetLifeUndo Popup Script
console.log('GetLifeUndo popup loaded');

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const undoBtn = document.getElementById('undo-btn');
const redoBtn = document.getElementById('redo-btn');
const tabsCount = document.getElementById('tabs-count');
const statesCount = document.getElementById('states-count');
const actionsList = document.getElementById('actions-list');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è popup
document.addEventListener('DOMContentLoaded', initPopup);

async function initPopup() {
  console.log('Initializing popup');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  await loadStatus();
  await loadRecentActions();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  setupEventListeners();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
  undoBtn.addEventListener('click', handleUndo);
  redoBtn.addEventListener('click', handleRedo);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
async function handleUndo() {
  console.log('Undo button clicked');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ content script
    await chrome.tabs.sendMessage(tab.id, {
      action: 'undo_action',
      data: {
        url: tab.url,
        timestamp: Date.now()
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    showNotification('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', 'success');
    await loadRecentActions();
    
  } catch (error) {
    console.error('Error handling undo:', error);
    showNotification('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è', 'error');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
async function handleRedo() {
  console.log('Redo button clicked');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ content script
    await chrome.tabs.sendMessage(tab.id, {
      action: 'redo_action',
      data: {
        url: tab.url,
        timestamp: Date.now()
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    showNotification('–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ', 'success');
    await loadRecentActions();
    
  } catch (error) {
    console.error('Error handling redo:', error);
    showNotification('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è', 'error');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
async function loadStatus() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∫–ª–∞–¥–æ–∫
    const tabs = await chrome.tabs.query({});
    tabsCount.textContent = tabs.length;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    const storage = await chrome.storage.local.get();
    const states = Object.keys(storage).filter(key => key.startsWith('state_'));
    statesCount.textContent = states.length;
    
  } catch (error) {
    console.error('Error loading status:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
async function loadRecentActions() {
  try {
    const storage = await chrome.storage.local.get();
    const actions = Object.keys(storage)
      .filter(key => key.startsWith('action_'))
      .map(key => ({
        id: key,
        ...storage[key]
      }))
      .sort((a, b) => b.timestamp - a.timestamp)
      .slice(0, 5);
    
    renderActions(actions);
    
  } catch (error) {
    console.error('Error loading recent actions:', error);
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
function renderActions(actions) {
  if (actions.length === 0) {
    actionsList.innerHTML = `
      <div class="empty-state">
        <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π</p>
      </div>
    `;
    return;
  }
  
  actionsList.innerHTML = actions.map(action => `
    <div class="action-item">
      <span class="action-icon">${getActionIcon(action.type)}</span>
      <span class="action-text">${action.description || action.type}</span>
      <span class="action-time">${formatTime(action.timestamp)}</span>
    </div>
  `).join('');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
function getActionIcon(type) {
  const icons = {
    'form': 'üìù',
    'tab': 'üìë',
    'navigation': 'üß≠',
    'input': '‚å®Ô∏è',
    'default': '‚Ü∂'
  };
  
  return icons[type] || icons.default;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(timestamp) {
  const now = Date.now();
  const diff = now - timestamp;
  
  if (diff < 60000) { // –ú–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã
    return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
  } else if (diff < 3600000) { // –ú–µ–Ω–µ–µ —á–∞—Å–∞
    const minutes = Math.floor(diff / 60000);
    return `${minutes}–º –Ω–∞–∑–∞–¥`;
  } else if (diff < 86400000) { // –ú–µ–Ω–µ–µ –¥–Ω—è
    const hours = Math.floor(diff / 3600000);
    return `${hours}—á –Ω–∞–∑–∞–¥`;
  } else {
    const days = Math.floor(diff / 86400000);
    return `${days}–¥ –Ω–∞–∑–∞–¥`;
  }
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  notification.textContent = message;
  notification.style.cssText = `
    position: fixed;
    top: 10px;
    left: 50%;
    transform: translateX(-50%);
    background: ${type === 'success' ? '#10B981' : type === 'error' ? '#EF4444' : '#3B82F6'};
    color: white;
    padding: 8px 16px;
    border-radius: 4px;
    font-size: 12px;
    z-index: 1000;
    animation: slideIn 0.3s ease;
  `;
  
  document.body.appendChild(notification);
  
  // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    notification.remove();
  }, 3000);
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
const style = document.createElement('style');
style.textContent = `
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(-50%) translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
  }
`;
document.head.appendChild(style);
