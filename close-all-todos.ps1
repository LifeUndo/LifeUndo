# Close All TODOs - –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –≤–∏—Å—è—â–∏—Ö –∑–∞–¥–∞—á
# –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ DNS/SSL —Ñ–∏–∫—Å–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π

Write-Host "üöÄ Close All TODOs - –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green
Write-Host ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
function Test-Endpoint {
    param(
        [string]$Uri,
        [string]$Method = "GET",
        [hashtable]$Headers = @{},
        [string]$Body = $null
    )
    
    try {
        $params = @{
            Uri = $Uri
            Method = $Method
            Headers = $Headers
            TimeoutSec = 10
            UseBasicParsing = $true
        }
        
        if ($Body) {
            $params.Body = $Body
        }
        
        $response = Invoke-RestMethod @params -ErrorAction Stop
        return @{
            Success = $true
            Data = $response
        }
    }
    catch {
        return @{
            Success = $false
            Error = $_.Exception.Message
        }
    }
}

# –°—á—ë—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
$completedTasks = 0
$totalTasks = 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∏
function Check-Task {
    param(
        [string]$TaskName,
        [string]$TestUrl,
        [string]$ExpectedStatus = "200"
    )
    
    $script:totalTasks++
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: $TaskName" -ForegroundColor Yellow
    
    try {
        $response = Invoke-WebRequest -Uri $TestUrl -Method Head -TimeoutSec 10 -UseBasicParsing -ErrorAction Stop
        if ($response.StatusCode -eq $ExpectedStatus) {
            Write-Host "   ‚úÖ $TaskName - –í–´–ü–û–õ–ù–ï–ù–û" -ForegroundColor Green
            $script:completedTasks++
            return $true
        } else {
            Write-Host "   ‚ùå $TaskName - –û–®–ò–ë–ö–ê (—Å—Ç–∞—Ç—É—Å: $($response.StatusCode))" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "   ‚ùå $TaskName - –û–®–ò–ë–ö–ê: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoint
function Check-APIEndpoint {
    param(
        [string]$TaskName,
        [string]$TestUrl,
        [hashtable]$Headers = @{}
    )
    
    $script:totalTasks++
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: $TaskName" -ForegroundColor Yellow
    
    $result = Test-Endpoint -Uri $TestUrl -Headers $Headers
    if ($result.Success) {
        Write-Host "   ‚úÖ $TaskName - –í–´–ü–û–õ–ù–ï–ù–û" -ForegroundColor Green
        $script:completedTasks++
        return $true
    } else {
        Write-Host "   ‚ùå $TaskName - –û–®–ò–ë–ö–ê: $($result.Error)" -ForegroundColor Red
        return $false
    }
}

Write-Host "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö TODO –∑–∞–¥–∞—á..." -ForegroundColor Cyan
Write-Host ""

# 1. DNS/SSL Fix (–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã)
Write-Host "1. üåê DNS/SSL Fix:" -ForegroundColor Magenta
$dnsOk = Check-Task "Cloudflare DNS fix" "https://getlifeundo.com/"
$sslOk = Check-Task "Vercel SSL fix" "https://www.getlifeundo.com/"

# 2. –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
Write-Host "`n2. üìÑ –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:" -ForegroundColor Magenta
Check-Task "Home page" "https://getlifeundo.com/"
Check-Task "Admin panel" "https://getlifeundo.com/admin"
Check-Task "System Health" "https://getlifeundo.com/admin/system-health"

# 3. API Endpoints (—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π)
$headers = @{
    "Authorization" = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("admin:password"))
    "Content-Type" = "application/json"
}

Write-Host "`n3. üîå API Endpoints:" -ForegroundColor Magenta
Check-APIEndpoint "Billing Plans" "https://getlifeundo.com/api/billing/plans" $headers
Check-APIEndpoint "Subscription" "https://getlifeundo.com/api/admin/subscription" $headers
Check-APIEndpoint "Quotas Usage" "https://getlifeundo.com/api/admin/quotas/usage" $headers
Check-APIEndpoint "Invoices" "https://getlifeundo.com/api/admin/invoices" $headers

# 4. Email Pause API
Write-Host "`n4. üìß Email Pause API:" -ForegroundColor Magenta
Check-APIEndpoint "Email List" "https://getlifeundo.com/api/admin/email" $headers
Check-APIEndpoint "Email Rules" "https://getlifeundo.com/api/admin/email/rules" $headers

# 5. Health Checks
Write-Host "`n5. üè• Health Checks:" -ForegroundColor Magenta
Check-APIEndpoint "DNS/SSL Health" "https://getlifeundo.com/api/_health/dns-ssl" $headers
Check-APIEndpoint "SMTP Health" "https://getlifeundo.com/api/_health/smtp" $headers
Check-APIEndpoint "FreeKassa Health" "https://getlifeundo.com/api/_health/freekassa" $headers

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP Listener
Write-Host "`n6. üì® SMTP Listener:" -ForegroundColor Magenta
$script:totalTasks++
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: SMTP Listener (–ø–æ—Ä—Ç 2525)" -ForegroundColor Yellow
try {
    $tcpClient = New-Object System.Net.Sockets.TcpClient
    $tcpClient.Connect("localhost", 2525)
    if ($tcpClient.Connected) {
        Write-Host "   ‚úÖ SMTP Listener - –í–´–ü–û–õ–ù–ï–ù–û" -ForegroundColor Green
        $script:completedTasks++
        $tcpClient.Close()
    } else {
        Write-Host "   ‚ùå SMTP Listener - –û–®–ò–ë–ö–ê (–Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è)" -ForegroundColor Red
    }
}
catch {
    Write-Host "   ‚ùå SMTP Listener - –û–®–ò–ë–ö–ê: $($_.Exception.Message)" -ForegroundColor Red
}

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
Write-Host "`nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢:" -ForegroundColor Cyan
Write-Host "==================" -ForegroundColor Cyan
Write-Host "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: $completedTasks –∏–∑ $totalTasks" -ForegroundColor Green

$percentage = [math]::Round(($completedTasks / $totalTasks) * 100, 1)
Write-Host "üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $percentage%" -ForegroundColor Cyan

if ($percentage -ge 90) {
    Write-Host "üéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ TODO –∑–∞–∫—Ä—ã—Ç—ã!" -ForegroundColor Green
    Write-Host "üöÄ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ PATCH 0.4.9-FUND!" -ForegroundColor Green
} elseif ($percentage -ge 70) {
    Write-Host "‚ö†Ô∏è –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ TODO –∑–∞–∫—Ä—ã—Ç–æ, –æ—Å—Ç–∞–ª–∏—Å—å –º–∏–Ω–æ—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏." -ForegroundColor Yellow
} else {
    Write-Host "‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê! –ú–Ω–æ–≥–æ –∑–∞–¥–∞—á –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ." -ForegroundColor Red
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
Write-Host "`nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:" -ForegroundColor Cyan
if (-not $dnsOk -or -not $sslOk) {
    Write-Host "üîß –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤—å DNS/SSL –≤ Cloudflare + Vercel" -ForegroundColor Yellow
}
Write-Host "üìã –ü—Ä–æ–≤–µ—Ä—å –º–∏–≥—Ä–∞—Ü–∏–∏: .\migration-verification.sql" -ForegroundColor Yellow
Write-Host "üìß –ó–∞–ø—É—Å—Ç–∏ SMTP —Å–µ—Ä–≤–∏—Å—ã: npm run smtp:start && npm run relay:start" -ForegroundColor Yellow
Write-Host "üß™ –í—ã–ø–æ–ª–Ω–∏ smoke-—Ç–µ—Å—Ç—ã: .\email-pause-smoke-test.ps1 && .\billing-smoke-test.ps1" -ForegroundColor Yellow

Write-Host "`nüéØ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!" -ForegroundColor Green

